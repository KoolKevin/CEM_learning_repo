Obiettivo dell'insegnamento è lo studio dei principali aspetti dell’hardware dei calcolatori:
    – Architettura
    – principi di funzionamento
    – progettazione
    – prestazioni
Questa attività si colloca a un livello di astrazione più alto (meno circuitale) rispetto ai contenuti di calcolatori elettronici T

DOMANDA FONDAMENTALE: Which processor is the best?
RISPOSTA: dipende

LEGGE DI MOORE
    "La Legge di Moore è un'osservazione empirica fatta da Gordon Moore, co-fondatore di Intel, nel 1965. Egli notò che il numero di transistor in un microprocessore
    raddoppiava approssimativamente ogni due anni, mantenendo invariato il costo. Questo comportava un aumento esponenziale della potenza di calcolo"

In pratica, ogni due anni è conveniente dimezzare la lunghezza dei transistor.
    -> conseguenze: 
        - nello stesso spazio ce ne stanno 4 volte tanti
        - ... guarda la registrazione 


LEGGE DI DENNARD
Mentre la Legge di Moore descrive l'aumento esponenziale del numero di transistor in un circuito integrato nel corso del tempo, la Legge di Dennard si concentra sull'aspetto
ENERGETICO di questa miniaturizzazione. 

In sostanza, la Legge di Dennard affermava che:
Man mano che i transistor diventano più piccoli, la loro densità di potenza (ovvero la quantità di energia consumata per unità di area) rimane costante. Questo significa che
il consumo totale di energia di un circuito integrato scala proporzionalmente alla sua area e a nient'altro.

Ottima domanda! La Legge di Dennard è strettamente correlata alla Legge di Moore e ha giocato un ruolo fondamentale nello sviluppo dell'elettronica.

La Legge di Dennard

Mentre la Legge di Moore descrive l'aumento esponenziale del numero di transistor in un circuito integrato nel corso del tempo, la Legge di Dennard si concentra sull'aspetto energetico di questa miniaturizzazione.

In sostanza, la Legge di Dennard affermava che:

Man mano che i transistor diventano più piccoli, la loro densità di potenza (ovvero la quantità di energia consumata per unità di area) rimane costante.
Questo significa che il consumo totale di energia di un circuito integrato scala proporzionalmente alla sua area.

Cosa comportava questa legge:
La Legge di Dennard, combinata con la Legge di Moore, ha permesso un'era di innovazione senza precedenti nell'elettronica:
    - Aumento delle prestazioni: Riducendo le dimensioni dei transistor, era possibile aumentare la frequenza di clock e quindi la velocità di elaborazione dei dati. (roba
      su capacità di gate, tensione di soglia e dettagli sui transistor, idc)
    - Diminuzione del consumo energetico: Nonostante l'aumento delle prestazioni, il consumo energetico complessivo di un chip rimaneva relativamente contenuto grazie
      alla diminuzione della densità di potenza.

Purtroppo, a partire dagli anni 2000, i ricercatori hanno iniziato a notare che la Legge di Dennard stava perdendo validità. I motivi principali sono legati a:
    - Effetti quantistici: idc
    - Dissipazione del calore: La miniaturizzazione estrema ha reso difficile dissipare il calore generato dai transistor, limitando ulteriormente le possibilità di 
      miglioramento

... guarda registrazione

--- THE END OF DENNARD'S SCALING
... riguarda la registrazione per capire meglio il problema della potenza.

    prima (old VLSI gen)        
    ----------                  
    L’ = L / 2                  
    V’ = V / 2                  
    F’ = F * 2                  
    D’ = 1 / L^2 = 4D           
    P’ = P                      

    oggi (new VLSI gen)        
    ----------  
    L’ = L / 2
    V’ = ~V
    F’ = ~F * 2
    D’ = 1 / L2 = 4 * D     |   -> the power crisis
    P’ = 4 * P              |

- Now power and/or heat generation are the limiting factors of the down-scaling.
- La diminuzione della tensione di alimentazione sta diventando difficile dato che la tensione di soglia non può essere più ridotta.
- Il fattore di crescità della frequenza di clock e dell'area dei chip sta diventando sempre più piccolo.

conclusione:
The core frequency and performance do not grow following the Moore’s law any longer! 
    -> Increase the number of cores to maintain the architectures evolution to the Moore’ law  

SPECIALIZATION
    • Today, we often need to look beyond general-purpose programmable processors to meet our design goals.
    • We trade flexibility for efficiency.
    • We remove the ability to run all programs and design for a narrow workload, perhaps even a single algorithm.
    • These “accelerators” can be 10-1000x better than a general-purpose solution in terms of power and performance.

DEF: ACCELARATORI
processore specializzato per calcoli particolari. Spesso affiancati a processori general purpose. (pensa tipo a GPU)

--------------------------------------------------------

ritorniamo alla domanda iniziale ->  PROCESSORE MIGLIORE? ->  Quello che esegue uno specifico programma meglio!

ARCHITETTURA DELLA CPU
L’architettura della CPU è definita dalla seguente terna:
    • Il set di istruzioni (architettura vista dall’utente detta anche ISA (Instruction Set Architecture) o linguaggio macchina)
    • La struttura interna
    • La realizzazione circuitale (cioè la tecnologia microelettronica impiegata nella realizzazione)
- Uno stesso set di istruzioni può essere realizzato con strutture interne diverse (es. x86-64, ARMv8, ARMv7, RISC-V).
- La stessa struttura interna può essere realizzata con tecnologie diverse (es. Haswell, Zen, Zen2, Zen3)
- Fissato un benchmark (programma di riferimento), le prestazioni del calcolatore dipendono da tutte le componenti della terna:
    CPU_time = N_istruzioni * CPI_medio * T_ck


DEF: Microarchitettura
implementazione dell'ISA. microarchitetture diverse possono implementare la stessa ISA ma avere unitò funzionali diverso al suo interno (10 unità per fare operazioni 
con interi vs una che ci mette 10 cicli di clock). La microarchitettura influenza CPI e tempo_di_clock.

(guarda meglio questo) 
tempo di esecuzione di un programma = num_istruzioni * CPI (clock per instruction) * tempo_di_clock (durata in secondi di un clock)
         -> NB; voglio un tempo, misurato in [s]

- Tutte le componenti dell'architettura di un calcolatore influenzano il tempo di esecuzione di un programma(terna): architetture -> CPU_time
    L'isa della cpu influenza   -> il numero di istruzioni, CPI_medio
    La struttura influenza      -> il CPI_medio (superscalare non bloccante, multicore), ma anche T_ck (Es.aumentando il numero di stadi della pipeline)
    La tecnologia influenza     -> il tempo di clock

--- compitino per mercoledì: calcola usando l'equazione qual'è il computer più veloce dell'esempio.  
CPI Example
    • Computer A: Cycle Time = 250ps, CPI = 2.0
    • Computer B: Cycle Time = 500ps, CPI = 1.2
    • Same ISA
    • Which is faster, and by how much?
        - Computer A: CPU_TIME = 250 * 2     = 500ps per istruzione (in media)
        - Computer A: CPU_TIME = 500 * 1.2   = 600ps per istruzione (in media)