RISC-V GENERALITà
    • 32 bit instructions.
    • Same instruction format works at 16/32/64/128-bit data formats.
    • Open source ISA, tutti possono usare le sue specifiche per costruire il loro processore.
    • RISC-V ISA is divided into extensions, tipo:
        - I (Integer): Questa è l'estensione di base e contiene le istruzioni necessarie per eseguire operazioni aritmetiche di base sui numeri interi.
        - M (Multiplication and Division): Come suggerisce il nome, questa estensione aggiunge istruzioni per eseguire moltiplicazioni e divisioni.
        - A (Atomic instructions): Questa estensione è fondamentale per la programmazione concorrente, in quanto fornisce istruzioni che garantiscono l'atomicità delle
          operazioni su memoria condivisa.
        - D (Double-Precision Floating-Point):  Questa estensione supporta i numeri in virgola mobile a precisione doppia, utilizzati comunemente nei calcoli scientifici.
      Le estensioni offrono numerosi vantaggi:
        - Personalizzazione: è possibile scegliere le estensioni necessarie per la propria applicazione, evitando di implementare funzionalità inutili.
        - Efficienza: Le estensioni possono migliorare le prestazioni del processore, ottimizzandolo per le operazioni più frequenti.
        - Flessibilità: L'ISA di RISC-V può essere adattata a molti scenari d'uso, da IoT a HPC. Inoltre, è possibile supportare nuovi standard e requisiti, garantendo 
          la sua longevità.
      Una particolare implementazione dell'ISA si indica con: RV + word-width + extensions. Ad esempio: RV32IMC: architettura a 32bit, integer+multiplication+compressed.

Nugget interessante:
gli immediati sono spesso utili per offset, oppure per salti. Di fatto attraverso gli immediati si risparmia una istruzione di load.

RISC-V INSTRUCTION ECODING
Le istruzioni RISC-V sono classificate in diversi tipi a seconda dell'operazione che eseguono. I tipi principali sono:
    - R-type:   Arithmetic with register operands
    - I-type:   Loads & arithmetic with immediate operand
    - S-type:   Stores
    - SB-type:  Conditional branch
    - UJ-type:  Unconditional jump
    - U-type:   Utilizzate per caricare un valore immediato in un registro.
Ricorda che tutte le istruzioni sono a 32 bit

Instructions are encoded in binary -> machine code
RISC-V instructions
    • Encoded as 32-bit instruction words
    • Small number of formats encoding operation code (opcode, che cosa bisogna fare: somma, shift, and, confronto, ecc...), register numbers, …

Nugget interessante 2:
Quando invoco una funzione e trasferisco il controllo, devo fare "spill to mem", cioè i registri che contengono valori di calcolo intermedi usati dalla funzione CHIAMANTE,
devono essere salvati in memoria (tipicamente stack) prima dell'elaborazione della funzione CHIAMATA, per poi essere ripristinati alla fine della funzione chiamata.
Questo perchè i registri gp sono finiti ma devono contenere lo stato corrente dell'elaborazione di tutte le funzioni. Bisogna gestirli quindi usando la memoria.

NB: esistono REGISTRI e ISTRUZIONI separate per operazioni sui FLOAT.

    